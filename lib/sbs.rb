require "subs/version"
require "thor"
require "fileutils"
require "find"
require "active_support/core_ext/string"

module Sbs
  class Error < StandardError; end

  class Cli < Thor
    desc "new CHAIN_NAME", "Create a new blockchain from substrate node template by branch."
    option :author, :aliases => :a, :default => "Wu Minzhe"
    option :branch, :aliases => :b, :default => "master"
    def new(chain_name)
      
      home = File.join(Dir.home, ".subs")
      Dir.mkdir(home) if not Dir.exist?(home)
      substrate_dir = File.join(home, "substrate")

      puts "1. Preparing substrate..."
      if not Dir.exist?(substrate_dir)
        `git clone https://github.com/paritytech/substrate #{substrate_dir}`
      end

      # checkout branch
      Dir.chdir substrate_dir do
        `git checkout #{options[:branch]}`

        if `git show-ref refs/heads/#{options[:branch]}`.strip == "" 
          puts "Branch #{options[:branch]} not exist!"
          return 
        end

        `git pull`
      end

      puts "2. Copying node-template..."
      if not Dir.exist?("./#{chain_name}")
        `cp -R #{substrate_dir}/node-template ./#{chain_name}`
      end

      Dir.chdir("./#{chain_name}") do
        puts "3. Customizing..."
        Find.find(".") do |path|
          if not File.directory? path
            content = `sed "s/Substrate Node Template/#{chain_name.titleize} Node/g" "#{path}"`
            File.open(path, "w") do |f| f.write(content) end

            content = `sed "s/Substrate Node/#{chain_name.titleize} Node/g" "#{path}"`
            File.open(path, "w") do |f| f.write(content) end

            content = `sed "s/Substrate node/#{chain_name.titleize} node/g" "#{path}"`
            File.open(path, "w") do |f| f.write(content) end

            content = `sed "s/node_template/#{chain_name.titleize.gsub(" ", "").underscore}/g" "#{path}"`
            File.open(path, "w") do |f| f.write(content) end

            content = `sed "s/node-template/#{chain_name.titleize.downcase.gsub(" ", "-")}/g" "#{path}"`
            File.open(path, "w") do |f| f.write(content) end

            if path.end_with?("toml")
              content = `sed "s/Anonymous/#{options[:author]}/g" "#{path}"`
              File.open(path, "w") do |f| f.write(content) end

              sed = "sed \"s/path = \\\"\\\.\\\.\\\/.*\\\"/git = 'https:\\\/\\\/github.com\\\/paritytech\\\/substrate.git', branch='#{options[:branch]}'/g\" #{path}"
              content = `#{sed}`
              File.open(path, "w") do |f| f.write(content) end
            end
          end
        end
        
        puts "4. Initializing repository..."
        `git init 2>/dev/null >/dev/null`
        `touch .gitignore`
        File.open(".gitignore", "w") do |f|
          gitignore = %q(# Generated by Cargo
# will have compiled files and executables
**/target/
# These are backup files generated by rustfmt
**/*.rs.bk)
          f.write(gitignore)
        end

        puts "5. Initializing WebAssembly build environment..."
        `./scripts/init.sh`
        
        puts "6. Building..."
        if File.exist?("./scripts/build.sh")
          `./scripts/build.sh`
        end
        `cargo build`
      end

      puts ""
      puts "blockchain #{chain_name} created by #{options[:author]}"
      puts ""
    end

    desc "check", "Check the substrate version used by your project. Do it in your project directory."
    def check
      puts get_versions
    end

    desc "diff", "Show the difference between your substrate version and branch head. Do it in your project directory."
    def diff
      versions = get_versions
      if versions.length > 1
        puts "Your project seems to depend on more than one substrate version"
        return
      end

      # get branch and commit
      version = versions[0]
      scan_branch = version.scan(/branch=(.+),/)[0]
      branch = scan_branch.nil? ? "master" : scan_branch[0]
      commit = version.scan(/commit=(.+)/)[0][0]

      
    end

    private
    def get_versions
      if not File.exist?("./Cargo.lock")
        puts "There is no Cargo.lock in current directory!"
        return
      end

      content = File.open("./Cargo.lock").read
      result = content.scan(/substrate\.git(.*#.+)"$/).uniq

      versions = []
      result.each do |item|
        splits = item[0].split("#")
        if splits[0].start_with?("?")
          versions << "#{splits[0][1 ..]}, commit=#{splits[1].strip}"
        else
          commit = splits[1].strip
          versions << "commit=#{commit}"
        end
      end
      
      versions = versions.uniq
      versions.select do |version|
        included = false
        versions.each do |v|
          if v != version && v.include?(version)
            included = true
          end
        end
        not included
      end
    end

  end
end

Sbs::Cli.start(ARGV)
